//
//  STFeatureModel.h
//  CourseProject
//
//  Created by 王继昇 on 2020/12/15.
//

#import <Foundation/Foundation.h>

NS_ASSUME_NONNULL_BEGIN

@interface STFeatureModel : NSObject

@end

NS_ASSUME_NONNULL_END




/*********************************************
 *
 *特征
 *
 *
 *
 *  面向对象的三大特征：    封装、继承、多态
 1.封装
         封装属性和方法放在一个对象中，只给外界公开访问的接口，而且把具体实现隐藏起来。主要目的增加可读性、可维护性、可扩展性。
 在OC中，把需要公开的属性、方法定义在声明中，.h文件中interface部分，而把不需要公开的属性、方法定义在.m文件中implementation部分，隐藏起来。
         封装的好处：
             1)代码结构更清晰
             2)可以和第三方合作，但又保护了源代码，避免泄漏。
 2.OC中实例变量的处理：
         一般情况下，实例变量是不能公开的，所以实例变量应用定义在implementation部分(私有的)，除非你需要直接在子类中访问，可以定义在interface部分。
 *
 3.封装中的方法
         a.如果.h文件中，未声明方法，此方法就是私有的，在其它文件中访问该方法是不合法的(必须不能访问)。
         b.如果.h文件中，声明方法，此方法就是公有的，在其它文件中可以访问该方法的。
 4.继承
         a.概念
             继承是一种代码复用技术，是类与类之间的一种关系。
             A类继承B类，A类中就直接拥有B类中的属性和方法。我们就把A类叫B类的子类（派生类），把B类叫做A类的父类(基类)。
 4.继承
         b.继承方式
             单继承
                 一个类只能继承一个父类。 爷<-爸<-你
                 OC Java C#
             多继承
                 一个类可以有多个父类
                 C++
         c.继承的语法
             @interface 类:父类
                 (所有类都继承于NSObject)
             @end
         d.继承是一种关系
             继承是类与类之间的关系，是一种"is a"关系。
             狗是动物 狗:动物
     e.方法的覆盖(重写)
             子类对父类继承的方法不满意，可以在子类中重写父类的方法
             1)方法名相同
             2)参数类型相同
             3)返回值类型相同
 f.如果重写父类的方法，优先调用子类的方法，如果子类没有重写父类的方法，则调用父类的方法。


 
 
 多态
 1.概念
         多种形态，引用的多种形态。
         对于一个引用变量，可以指向任何类的对象
         对于一个父类的引用(类与类之间有一种关系，继承关系)，可以指向子类，也可以向本类，指向的类型不同。当通过此引用向对象发送消息，调用的方法是不同的，此时方法的调用就是多态。
 1.概念
         a.类与类之间有关系，继承关系。
         b.父类的引用可以指向子类的引用，或者本类的引用。
         c.父类的引用指向子类的对象，发送消息，调用的是子类对象的方法。
             父类的引用指向本类的对象，发送消息，调用的是本类对象的方法。
 2.编译期类型和运行期类型
         a.在多态下，父类的引用可以指向子类的引用，当编译的时候，编译器无法确定指向的对象是什么类型，所以编译器会将引用当做父类类型引用编译检查。
         b.在调用方法时，却是子类对象。（子类类型创建的空间）。
 总结:TRAnimal* animal=[[TRDog alloc]init];
 编译时，把TRDog类型当成TRAnimal类型编译。
 [animal eat];
 运行时，调用的是TRDog类型的对象。

 3.多态可以用在参数，参数多态
 4.多态可以用在返回值类型，返回值多态 工厂方法
 5.多态也可以用在数组
 6.多态的好处
         可以让我们设计更合理的代码，使用代码更通用，使用程序的可维护性和可扩展性更强。
 7.多态特性的展现
             a.可以用在方法的参数
             b.可以用在方法的返回值类型
             c.可以用在数组和集合上


 
 */

 
 
